kind: pipeline
name: arch-g++

steps:
- name: build-and-test
  image: muttleyxd/a3ul_archlinux_build:latest
  commands:
    - mkdir /tmp/build && cd /tmp/build
    - cmake /drone/src -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-Werror" -DRUN_TESTS=ON -DDEVELOPER_MODE=ON
    - make -j$(nproc)
    - ctest -V

---
kind: pipeline
name: ubuntu-16.04-g++-8

steps:
- name: build-and-test
  image: muttleyxd/a3ul_ubuntu-16.04_build:latest
  commands:
    - mkdir /tmp/build && cd /tmp/build
    - cmake /drone/src -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-Werror -static-libstdc++" -DCMAKE_CXX_COMPILER=g++-8 -DRUN_TESTS=ON -DDEVELOPER_MODE=ON -DCMAKE_PREFIX_PATH=/qt/5.15.2/gcc_64
    - make -j$(nproc)
    - ctest -V

---
kind: pipeline
name: ubuntu-18.04-g++-8

steps:
- name: build-and-test
  image: muttleyxd/a3ul_ubuntu-18.04_build:latest
  commands:
    - mkdir /tmp/build && cd /tmp/build
    - cmake /drone/src -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_CXX_COMPILER=g++-8 -DRUN_TESTS=ON -DDEVELOPER_MODE=ON
    - make -j$(nproc)
    - ctest -V

---
kind: pipeline
name: arch-clang-fuzzing-tests

steps:
- name: build-and-test
  image: muttleyxd/a3ul_archlinux_build:latest
  commands:
    - mkdir /tmp/build && cd /tmp/build
    - cmake /drone/src -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_FLAGS="-Werror" -DRUN_TESTS=ON -DDEVELOPER_MODE=ON -DRUN_TESTS_FUZZING=ON -DRUN_TESTS_UNIT=OFF
    - make -j$(nproc)
    - export ASAN_OPTIONS=detect_leaks=0 # LSAN needs to be disabled, because cloud.drone.io doesn't offer ptrace capability
    - ctest --output-on-failure || ls | grep crash | xargs -n1 cat

---
kind: pipeline
name: arch-g++-package

clone:
  disable: true

steps:
- name: clone
  image: alpine/git
  commands:
  - git clone $DRONE_GIT_HTTP_URL .
  - git fetch origin $CI_COMMIT_REF
  - git merge $DRONE_COMMIT
  - chmod 777 /tmp/build
  volumes:
  - name: package
    path: /tmp/build
- name: build-test-makepkg
  image: muttleyxd/a3ul_archlinux_build:latest
  volumes:
  - name: package
    path: /tmp/build
  commands:
    - export STEAMWORKS_SDK_PATH=""

    # run these commands only if gpg decryption key is available
    - test ! -z "$GPG_DECRYPTION_KEY_BASE64" && echo $GPG_DECRYPTION_KEY_BASE64 | base64 -d >/tmp/key.gpg
    - test ! -z "$GPG_DECRYPTION_KEY_BASE64" && tools/ci/obtain-steamworks.sh
    - test ! -z "$GPG_DECRYPTION_KEY_BASE64" && export STEAMWORKS_SDK_PATH=/tmp/steamworks

    - tools/ci/packaging/archlinux/build.sh /drone/src /tmp/build /tmp/build $STEAMWORKS_SDK_PATH
  environment:
    GPG_DECRYPTION_KEY_BASE64:
      from_secret: gpg_decryption_key_base64
- name: publish_release
  image: muttleyxd/github-release
  environment:
    GITHUB_PUBLISH_TOKEN:
      from_secret: github_publish_key
  commands:
    - cd /tmp/build
    - mv $(echo *.tar.*) $(echo *.tar.* | sed 's/x86_64.pkg.tar./archlinux-x86_64.pkg.tar./g')
    - github-release --token $GITHUB_PUBLISH_TOKEN --repository muttleyxd/dayz-unix-launcher --file-glob "/tmp/build/*.tar.*"
  when:
    event: [push, tag, deployment]
    branch:
      - master
  volumes:
  - name: package
    path: /tmp/build

volumes:
- name: package
  temp: {}

---
kind: pipeline
name: appimage-g++-8-package

clone:
  disable: true

steps:
- name: clone
  image: alpine/git
  commands:
  - git clone $DRONE_GIT_HTTP_URL .
  - git fetch origin $CI_COMMIT_REF
  - git merge $DRONE_COMMIT
  - chmod 777 /tmp/build
  volumes:
  - name: package
    path: /tmp/build
- name: build-test-makepkg
  image: muttleyxd/a3ul_appimage_build:latest
  volumes:
  - name: package
    path: /tmp/build
  commands:
    - export STEAMWORKS_SDK_PATH=""

    # run these commands only if gpg decryption key is available
    - test ! -z "$GPG_DECRYPTION_KEY_BASE64" && echo $GPG_DECRYPTION_KEY_BASE64 | base64 -d >/tmp/key.gpg
    - test ! -z "$GPG_DECRYPTION_KEY_BASE64" && tools/ci/obtain-steamworks.sh
    - test ! -z "$GPG_DECRYPTION_KEY_BASE64" && export STEAMWORKS_SDK_PATH=/tmp/steamworks

    - tools/ci/packaging/appimage/build.sh /drone/src /tmp/build /tmp/build $STEAMWORKS_SDK_PATH
  environment:
    GPG_DECRYPTION_KEY_BASE64:
      from_secret: gpg_decryption_key_base64
- name: publish_release
  image: muttleyxd/github-release
  when:
    event: [push, tag, deployment]
    branch:
    - master
  environment:
    GITHUB_PUBLISH_TOKEN:
      from_secret: github_publish_key
  commands:
    - cd /tmp/build
    - github-release --token $GITHUB_PUBLISH_TOKEN --repository muttleyxd/dayz-unix-launcher --file-glob "/tmp/build/*.AppImage"
  volumes:
  - name: package
    path: /tmp/build

volumes:
- name: package
  temp: {}

---
kind: pipeline
name: ubuntu-16.04-g++-8-package

clone:
  disable: true

steps:
- name: clone
  image: alpine/git
  commands:
  - git clone $DRONE_GIT_HTTP_URL .
  - git fetch origin $CI_COMMIT_REF
  - git merge $DRONE_COMMIT
  - chmod 777 /tmp/build
  volumes:
  - name: package
    path: /tmp/build
- name: build-test-makepkg
  image: muttleyxd/a3ul_ubuntu-16.04_build:latest
  volumes:
  - name: package
    path: /tmp/build
  commands:
    - export STEAMWORKS_SDK_PATH=""

    # run these commands only if gpg decryption key is available
    - test ! -z "$GPG_DECRYPTION_KEY_BASE64" && echo $GPG_DECRYPTION_KEY_BASE64 | base64 -d >/tmp/key.gpg
    - test ! -z "$GPG_DECRYPTION_KEY_BASE64" && tools/ci/obtain-steamworks.sh
    - test ! -z "$GPG_DECRYPTION_KEY_BASE64" && export STEAMWORKS_SDK_PATH=/tmp/steamworks

    - tools/ci/packaging/ubuntu-16.04/build.sh /drone/src /tmp/build /tmp/build $STEAMWORKS_SDK_PATH
  environment:
    GPG_DECRYPTION_KEY_BASE64:
      from_secret: gpg_decryption_key_base64
- name: publish_release
  image: muttleyxd/github-release
  when:
    event: [push, tag, deployment]
    branch:
    - master
  environment:
    GITHUB_PUBLISH_TOKEN:
      from_secret: github_publish_key
  commands:
    - cd /tmp/build
    - github-release --token $GITHUB_PUBLISH_TOKEN --repository muttleyxd/dayz-unix-launcher --file-glob "/tmp/build/*.deb"
  volumes:
  - name: package
    path: /tmp/build

volumes:
- name: package
  temp: {}

---
kind: pipeline
name: ubuntu-18.04-g++-8-package

clone:
  disable: true

steps:
- name: clone
  image: alpine/git
  commands:
  - git clone $DRONE_GIT_HTTP_URL .
  - git fetch origin $CI_COMMIT_REF
  - git merge $DRONE_COMMIT
  - chmod 777 /tmp/build
  volumes:
  - name: package
    path: /tmp/build
- name: build-test-makepkg
  image: muttleyxd/a3ul_ubuntu-18.04_build:latest
  volumes:
  - name: package
    path: /tmp/build
  commands:
    - export STEAMWORKS_SDK_PATH=""

    # run these commands only if gpg decryption key is available
    - test ! -z "$GPG_DECRYPTION_KEY_BASE64" && echo $GPG_DECRYPTION_KEY_BASE64 | base64 -d >/tmp/key.gpg
    - test ! -z "$GPG_DECRYPTION_KEY_BASE64" && tools/ci/obtain-steamworks.sh
    - test ! -z "$GPG_DECRYPTION_KEY_BASE64" && export STEAMWORKS_SDK_PATH=/tmp/steamworks

    - tools/ci/packaging/ubuntu-18.04/build.sh /drone/src /tmp/build /tmp/build $STEAMWORKS_SDK_PATH
  environment:
    GPG_DECRYPTION_KEY_BASE64:
      from_secret: gpg_decryption_key_base64
- name: publish_release
  image: muttleyxd/github-release
  when:
    event: [push, tag, deployment]
    branch:
    - master
  environment:
    GITHUB_PUBLISH_TOKEN:
      from_secret: github_publish_key
  commands:
    - cd /tmp/build
    - github-release --token $GITHUB_PUBLISH_TOKEN --repository muttleyxd/dayz-unix-launcher --file-glob "/tmp/build/*.deb"
  volumes:
  - name: package
    path: /tmp/build

volumes:
- name: package
  temp: {}
